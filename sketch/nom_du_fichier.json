[
	// si yPos est unique
	// TR>TD_n1
	{
		"name": "s1",
		"xPos": 0,
		"yPos": 0,
		"height": 167,
		"width": 620
	},
	// TR>TD_n1
	// si yPos=167 n'est pas unique on crÃ©er un nouvel obj ou un sous obj
	// puis on ajoute les obj qui ont le mÃªme xPos jusqu'au suivant yPos indentique
	// et next yPos!=167 et xPos=next xPos alors :
	// table > tr > td*2 (s2c1s1 + s2c1s2 == xPos)
	{
		"name": "s2c1s1",
		"xPos": 0,
		"yPos": 167,
		"height": 51,
		"width": 158
	},
	{
		"name": "s2c1s2",
		"xPos": 0,
		"yPos": 218,
		"height": 112,
		"width": 158
	},
	// si yPos:167 et xPos != to next xPos :
	//    tr > td*1  (s2c2 xPos unique)
	{
		"name": "s2c2",
		"xPos": 158,
		"yPos": 167,
		"height": 163,
		"width": 254
	},
	// si yPos:167 et xPos == next xPos == next xPos
	//    tr*3 > td (s2c3s1 + s2c3s2 + s2c3s3 == xPos:412)
	{
		"name": "s2c3s1",
		"xPos": 412,
		"yPos": 167,
		"height": 51,
		"width": 208
	},
	{
		"name": "s2c3s2",
		"xPos": 412,
		"yPos": 218,
		"height": 58,
		"width": 208
	},
	{
		"name": "s2c3s3",
		"xPos": 412,
		"yPos": 276,
		"height": 54,
		"width": 208
	},
	// yPos == next yPos et xPos != next xPos
	// TR>TD_n1 * 2 
	{
		"name": "s3c1",
		"xPos": 0,
		"yPos": 330,
		"height": 102,
		"width": 342
	},
	{
		"name": "s3c2",
		"xPos": 342,
		"yPos": 330,
		"height": 102,
		"width": 278
	}
]

// 1- get unique
// const unique = [...new Set(array.map(item => item.yPos))];
// output [0, 167, 218, 276, 330 ]
// verifier chaque next d'obj item.yPos unqiue
// const all = [...new Set( array.map( (item,idx) => [item.yPos, item.xPos] ) )];
// ouput:
// [
// [0, 0 ],
// nested[167, 0 ], [218, 0 ],
// nested[167, 158 ],
// nested[167, 412 ], [218, 412 ], [276, 412 ],
// [330, 0 ], [330, 342 ]
// ]

